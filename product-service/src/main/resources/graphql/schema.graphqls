enum ProductType {
    GLUTEN
    GLUTEN_FREE
    VEGAN
    KETO
}

enum Flavor {
   CHOCOLATE
    CANELA
    VAINILLA
    FRESA
    PLATANO
    NUEZ
    MANTEQUILLA
}

enum SortDirection {
  ASC
  DESC
}

type Product {
    id: ID!
    name: String!
    description: String
    price: Float!
    quantity: Int!
    imgUrl: String
    type: ProductType
    flavor: Flavor
    onSale: Boolean
    discountPercentage: Float
}

input ProductInputDTO {
    name: String!
    description: String!
    price: Float!
    quantity: Int!
    imgUrl: String!
    type: ProductType!
    flavor: Flavor
    onSale: Boolean
    discountPercentage: Float
}

input ProductFilterInput {
  types: [ProductType] 
  flavors: [Flavor]    
  onSale: Boolean
  priceFrom: Float
  priceTo: Float
}

type PagedProduct {
    content: [Product]
    pageNumber: Int
    pageSize: Int
    totalElements: Int
    totalPages: Int
    last: Boolean
}

type Query {
    getAllProducts(page: Int, size: Int, sort: SortDirection): PagedProduct
    getFilteredProducts(filter: ProductFilterInput, page: Int, size: Int, sort: SortDirection): PagedProduct
    getProductById(id: ID!): Product
    searchProductsByName(name: String!, page: Int, size: Int): [Product]
}

type Mutation {
    createProduct(input: ProductInputDTO!): Product
    updateProduct(id: ID!, input: ProductInputDTO!): Product
    deleteProduct(id: ID!): Boolean
}
